{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/iamsaksham77/ALY6110/blob/main/Module2_Boston_Housing_DataAnalysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "sq8U3BtmhtRx"
      },
      "cell_type": "markdown",
      "source": [
        "\n",
        "# **Running Pyspark inÂ Colab**\n",
        "\n",
        "To run spark in Colab, You need proper setup. Next cell will create required setup for running Spark/PySpark:"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# innstall java\n",
        "!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n",
        "\n",
        "# install spark (change the version number if needed)\n",
        "!wget -q https://archive.apache.org/dist/spark/spark-3.0.0/spark-3.0.0-bin-hadoop3.2.tgz\n",
        "\n",
        "# unzip the spark file to the current folder\n",
        "!tar xf spark-3.0.0-bin-hadoop3.2.tgz\n",
        "\n",
        "# set your spark folder to your system path environment.\n",
        "import os\n",
        "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n",
        "os.environ[\"SPARK_HOME\"] = \"/content/spark-3.0.0-bin-hadoop3.2\"\n",
        "\n",
        "\n",
        "# install findspark using pip\n",
        "!pip install -q findspark\n"
      ],
      "metadata": {
        "id": "j0VTrimTI_9O"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "98BG_Fj5C64L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "id": "9_Uz1NL4gHFx"
      },
      "cell_type": "code",
      "source": [
        "import findspark\n",
        "findspark.init()\n",
        "from pyspark.sql import SparkSession\n",
        "spark = SparkSession.builder.master(\"local[*]\").getOrCreate()"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# # Create SparkSession from builder\n",
        "# import pyspark\n",
        "# from pyspark.sql import SparkSession\n",
        "# spark = SparkSession.builder.master(\"local[1]\") \\\n",
        "#                     .appName('SparkByExamples.com') \\\n",
        "#                     .getOrCreate()"
      ],
      "metadata": {
        "id": "G-yKQ5SnPR7e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Spark Version: \" + spark.version)\n",
        "print(spark.sparkContext)\n",
        "print(spark.sparkContext.appName)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RpMFuPu9ErqK",
        "outputId": "ba484439-dac3-4de3-acaf-f68f5e909030"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Spark Version: 3.0.0\n",
            "<SparkContext master=local[*] appName=pyspark-shell>\n",
            "pyspark-shell\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = spark.read.csv(\"BostonHousing.csv\", header=True)"
      ],
      "metadata": {
        "id": "IgCM9e9kDAum"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Showing the top 5 rows.\n",
        "df.show(5)\n",
        "\n"
      ],
      "metadata": {
        "id": "F9xDUEdNPST8",
        "outputId": "ed809aa1-0c6f-43c1-f05e-af9a7b64056a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+---+-----+----+-----+-----+----+------+---+---+-------+------+-----+----+\n",
            "|   crim| zn|indus|chas|  nox|   rm| age|   dis|rad|tax|ptratio|     b|lstat|medv|\n",
            "+-------+---+-----+----+-----+-----+----+------+---+---+-------+------+-----+----+\n",
            "|0.00632| 18| 2.31|   0|0.538|6.575|65.2|  4.09|  1|296|   15.3| 396.9| 4.98|  24|\n",
            "|0.02731|  0| 7.07|   0|0.469|6.421|78.9|4.9671|  2|242|   17.8| 396.9| 9.14|21.6|\n",
            "|0.02729|  0| 7.07|   0|0.469|7.185|61.1|4.9671|  2|242|   17.8|392.83| 4.03|34.7|\n",
            "|0.03237|  0| 2.18|   0|0.458|6.998|45.8|6.0622|  3|222|   18.7|394.63| 2.94|33.4|\n",
            "|0.06905|  0| 2.18|   0|0.458|7.147|54.2|6.0622|  3|222|   18.7| 396.9| 5.33|36.2|\n",
            "+-------+---+-----+----+-----+-----+----+------+---+---+-------+------+-----+----+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TNElFV1dQ-4s",
        "outputId": "e272031b-ad37-4671-cb60-ba06b2231246",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<SparkContext master=local[*] appName=pyspark-shell>\n",
            "Spark App Name : pyspark-shell\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Counting the number of rows in the dataset.\n",
        "row_count = df.rdd.count()\n",
        "print(row_count)"
      ],
      "metadata": {
        "id": "qUp-ux9dQ_Cq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4000489c-ebf4-4be0-f7e7-06f29a89aff9"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "506\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Showing the schema of the dataset\n",
        "df.printSchema()\n"
      ],
      "metadata": {
        "id": "MvTVA9ZfQ_Lj",
        "outputId": "7d40238b-b1e9-4a80-ec77-784f854c7596",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- crim: string (nullable = true)\n",
            " |-- zn: string (nullable = true)\n",
            " |-- indus: string (nullable = true)\n",
            " |-- chas: string (nullable = true)\n",
            " |-- nox: string (nullable = true)\n",
            " |-- rm: string (nullable = true)\n",
            " |-- age: string (nullable = true)\n",
            " |-- dis: string (nullable = true)\n",
            " |-- rad: string (nullable = true)\n",
            " |-- tax: string (nullable = true)\n",
            " |-- ptratio: string (nullable = true)\n",
            " |-- b: string (nullable = true)\n",
            " |-- lstat: string (nullable = true)\n",
            " |-- medv: string (nullable = true)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Converting all the colums from string to double\n",
        "from pyspark.sql.functions import col\n",
        "df = df.select([col(c).cast(\"double\").alias(c) for c in df.columns])\n",
        "df.printSchema()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wo2vAXLQSiga",
        "outputId": "bc2fb452-40a5-413d-86c0-29b4c2abc0e3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- crim: double (nullable = true)\n",
            " |-- zn: double (nullable = true)\n",
            " |-- indus: double (nullable = true)\n",
            " |-- chas: double (nullable = true)\n",
            " |-- nox: double (nullable = true)\n",
            " |-- rm: double (nullable = true)\n",
            " |-- age: double (nullable = true)\n",
            " |-- dis: double (nullable = true)\n",
            " |-- rad: double (nullable = true)\n",
            " |-- tax: double (nullable = true)\n",
            " |-- ptratio: double (nullable = true)\n",
            " |-- b: double (nullable = true)\n",
            " |-- lstat: double (nullable = true)\n",
            " |-- medv: double (nullable = true)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking for Null Values\n",
        "# Check for null values\n",
        "from pyspark.sql.functions import col, sum\n",
        "\n",
        "# Calculate null values for each column\n",
        "null_counts = df.select([sum(col(c).isNull().cast(\"int\")).alias(c) for c in df.columns])\n",
        "\n",
        "# Show the null counts\n",
        "null_counts.show()"
      ],
      "metadata": {
        "id": "bl4VfE_OQ_Sg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01fd39f4-c5fa-416e-d4b9-a0e7acd27ed7"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+---+-----+----+---+---+---+---+---+---+-------+---+-----+----+\n",
            "|crim| zn|indus|chas|nox| rm|age|dis|rad|tax|ptratio|  b|lstat|medv|\n",
            "+----+---+-----+----+---+---+---+---+---+---+-------+---+-----+----+\n",
            "|   0|  0|    0|   0|  0|  0|  0|  0|  0|  0|      0|  0|    0|   0|\n",
            "+----+---+-----+----+---+---+---+---+---+---+-------+---+-----+----+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Summary Statistics\n",
        "summary_stats = df.describe()\n",
        "summary_stats.show()"
      ],
      "metadata": {
        "id": "d2NZPAF6TZmw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e09096a-1ef3-46dc-c683-c017d632bbef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+\n",
            "|summary|              crim|                zn|             indus|              chas|               nox|                rm|               age|               dis|              rad|               tax|           ptratio|             lstat|              medv|             Age10|\n",
            "+-------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+\n",
            "|  count|               506|               506|               506|               506|               506|               506|               506|               506|              506|               506|               506|               506|               506|               506|\n",
            "|   mean|3.6134189723320147|11.363636363636363|11.136778656126504|0.0691699604743083|0.5547628458498024| 6.285217391304348| 68.57490118577078| 3.795434782608693|9.549407114624506| 408.2371541501976|18.455533596837967|12.653063241106723|22.532806324110698| 75.43239130434783|\n",
            "| stddev| 8.601602243696705| 23.32245299451514| 6.860352940897589|0.2539940413404101|0.1155068172648583|0.7028533445424924|28.148861406903595|2.1057760049129106|8.707259384239366|168.53711605495903|2.1649455237144455| 7.141061511348571| 9.197104087379815| 30.96374754759397|\n",
            "|    min|              0.01|               0.0|              0.46|               0.0|              0.39|              3.56|               2.9|              1.13|              1.0|             187.0|              12.6|              1.73|               5.0|              3.19|\n",
            "|    max|             88.98|             100.0|             27.74|               1.0|              0.87|              8.78|             100.0|             12.13|             24.0|             711.0|              22.0|             37.97|              50.0|110.00000000000001|\n",
            "+-------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Defining the bins based on rm column.\n",
        "from pyspark.sql.functions import col, when\n",
        "df = df.withColumn(\n",
        "    \"bins\",\n",
        "    when((col(\"rm\") >= 3) & (col(\"rm\") < 4), \"3-4\")\n",
        "    .when((col(\"rm\") >= 4) & (col(\"rm\") < 5), \"4-5\")\n",
        "    .when((col(\"rm\") >= 5) & (col(\"rm\") < 6), \"5-6\")\n",
        "    .when((col(\"rm\") >= 6) & (col(\"rm\") < 7), \"6-7\")\n",
        "    .when((col(\"rm\") >= 7) & (col(\"rm\") < 8), \"7-8\")\n",
        "    .otherwise(\"8-9\")\n",
        ")\n"
      ],
      "metadata": {
        "id": "FThcCSO5SikO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "636f8ddc-2307-486c-a757-43e3d490127a"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+----+-----+----+-----+-----+----+------+---+-----+-------+------+-----+----+----+\n",
            "|   crim|  zn|indus|chas|  nox|   rm| age|   dis|rad|  tax|ptratio|     b|lstat|medv|bins|\n",
            "+-------+----+-----+----+-----+-----+----+------+---+-----+-------+------+-----+----+----+\n",
            "|0.00632|18.0| 2.31| 0.0|0.538|6.575|65.2|  4.09|1.0|296.0|   15.3| 396.9| 4.98|24.0| 6-7|\n",
            "|0.02731| 0.0| 7.07| 0.0|0.469|6.421|78.9|4.9671|2.0|242.0|   17.8| 396.9| 9.14|21.6| 6-7|\n",
            "|0.02729| 0.0| 7.07| 0.0|0.469|7.185|61.1|4.9671|2.0|242.0|   17.8|392.83| 4.03|34.7| 7-8|\n",
            "|0.03237| 0.0| 2.18| 0.0|0.458|6.998|45.8|6.0622|3.0|222.0|   18.7|394.63| 2.94|33.4| 6-7|\n",
            "|0.06905| 0.0| 2.18| 0.0|0.458|7.147|54.2|6.0622|3.0|222.0|   18.7| 396.9| 5.33|36.2| 7-8|\n",
            "+-------+----+-----+----+-----+-----+----+------+---+-----+-------+------+-----+----+----+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking for bins\n",
        "unique_values_df = df.select(\"bins\").distinct()\n",
        "unique_values_df.show()"
      ],
      "metadata": {
        "id": "HS5wq6n-Sino",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "31805f0a-5a96-46b0-9648-842627919762"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+\n",
            "|bins|\n",
            "+----+\n",
            "| 3-4|\n",
            "| 7-8|\n",
            "| 4-5|\n",
            "| 5-6|\n",
            "| 6-7|\n",
            "| 8-9|\n",
            "+----+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Statistics for each bin created\n",
        "from pyspark.sql.functions import col, mean, stddev, count, when, desc\n",
        "# Calculate mean, standard deviation\n",
        "agg_df = df.groupBy(\"bins\").agg(\n",
        "    mean(\"rm\").alias(\"mean_rm\"),\n",
        "    stddev(\"rm\").alias(\"stddev_rm\"),\n",
        "    count(\"rm\").alias(\"count_rm\")\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BDx2A1oRU6sN",
        "outputId": "10025e58-5097-4ebd-f9c7-7a839c6486d9"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+------------------+-------------------+--------+\n",
            "|bins|           mean_rm|          stddev_rm|count_rm|\n",
            "+----+------------------+-------------------+--------+\n",
            "| 3-4|3.7119999999999997|0.21354624791833737|       2|\n",
            "| 7-8| 7.371666666666667| 0.2814513575498734|      51|\n",
            "| 4-5| 4.689538461538461| 0.3115093940222389|      13|\n",
            "| 5-6| 5.725759493670881|0.23525891497433513|     158|\n",
            "| 6-7| 6.403275092936804|0.27041161026641525|     269|\n",
            "| 8-9| 8.348538461538462| 0.2512606931006836|      13|\n",
            "+----+------------------+-------------------+--------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Sorting the aggregated df\n",
        "from pyspark.sql.functions import desc\n",
        "agg_df = agg_df.sort(desc(\"count_rm\"))"
      ],
      "metadata": {
        "id": "x1aavv-6bCuK"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting the data into a Pandas DataFrame for visualization\n",
        "pandas_agg_df = agg_df.toPandas()"
      ],
      "metadata": {
        "id": "WPSgYwPDbs-x"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a bar chart using matplotlib and seaborn\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#Creating a bar chart\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='count_rm', y='bins', data= pandas_agg_df, order=pandas_agg_df['bins'])\n",
        "plt.xlabel('Count')\n",
        "plt.ylabel('Bins')\n",
        "plt.title('Bar Chart of Bins vs. Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Rta1OPNsb9fY",
        "outputId": "74deca30-117f-4072-dd4d-05a0ef5f7b96"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "medv_agg_df = df.groupBy(\"bins\").agg(\n",
        "    mean(\"medv\").alias(\"mean_medv\"),\n",
        "    stddev(\"medv\").alias(\"stddev_medv\")\n",
        ")"
      ],
      "metadata": {
        "id": "zw7dTWRSQhcp"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Combining the 2 aggregated dataframes for Analysis\n",
        "agg_df = agg_df.join(medv_agg_df, \"bins\", \"inner\")\n",
        "agg_df.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IxRBbCcCe9Mz",
        "outputId": "a36175cd-1fc3-4c42-e025-2e14c51c25ba"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+------------------+-------------------+--------+------------------+------------------+\n",
            "|bins|           mean_rm|          stddev_rm|count_rm|         mean_medv|       stddev_medv|\n",
            "+----+------------------+-------------------+--------+------------------+------------------+\n",
            "| 3-4|3.7119999999999997|0.21354624791833737|       2|              25.3|3.1112698372208083|\n",
            "| 7-8| 7.371666666666667| 0.2814513575498734|      51|36.917647058823526| 8.316362326939656|\n",
            "| 4-5| 4.689538461538461| 0.3115093940222389|      13|16.023076923076925|10.943959813991297|\n",
            "| 5-6| 5.725759493670881|0.23525891497433513|     158|17.487341772151893| 5.352667460226968|\n",
            "| 6-7| 6.403275092936804|0.27041161026641525|     269| 22.01598513011151| 6.467721594707344|\n",
            "| 8-9| 8.348538461538462| 0.2512606931006836|      13|              44.2| 8.092383250110357|\n",
            "+----+------------------+-------------------+--------+------------------+------------------+\n",
            "\n"
          ]
        }
      ]
    }
  ]
}